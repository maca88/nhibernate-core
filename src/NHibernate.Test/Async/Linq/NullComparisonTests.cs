//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NHibernate.Linq;
using NHibernate.DomainModel.Northwind.Entities;
using NUnit.Framework;
using NUnit.Framework.Constraints;

namespace NHibernate.Test.Linq
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class NullComparisonTestsAsync : LinqTestCase
	{
		private static readonly AnotherEntity OutputSet = new AnotherEntity {Output = "output"};
		private static readonly AnotherEntity InputSet = new AnotherEntity {Input = "input"};
		private static readonly AnotherEntity BothSame = new AnotherEntity {Input = "i/o", Output = "i/o"};
		private static readonly AnotherEntity BothNull = new AnotherEntity();
		private static readonly AnotherEntity BothDifferent = new AnotherEntity {Input = "input", Output = "output"};

		[Test]
		public async Task NullInequalityWithNotNullAsync()
		{
			IQueryable<AnotherEntityRequired> q;

			q = session.Query<AnotherEntityRequired>().Where(o => o.Input != null);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, InputSet, BothSame, BothDifferent));

			q = session.Query<AnotherEntityRequired>().Where(o => null != o.Input);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, InputSet, BothSame, BothDifferent));

			q = session.Query<AnotherEntityRequired>().Where(o => o.InputNullability != AnotherEntityNullability.True);
			await (ExpectAsync(q, Does.Not.Contain("end is null").IgnoreCase, InputSet, BothSame, BothDifferent));

			q = session.Query<AnotherEntityRequired>().Where(o => AnotherEntityNullability.True != o.InputNullability);
			await (ExpectAsync(q, Does.Not.Contain("end is null").IgnoreCase, InputSet, BothSame, BothDifferent));

			q = session.Query<AnotherEntityRequired>().Where(o => "input" != o.Input);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, BothSame));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Input != "input");
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, BothSame));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Input != o.Output);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, BothDifferent));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Output != o.Input);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, BothDifferent));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Input != o.NullableOutput);
			await (ExpectAsync(q, Does.Not.Contain("Input is null").IgnoreCase, BothDifferent, InputSet, BothNull));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableOutput != o.Input);
			await (ExpectAsync(q, Does.Not.Contain("Input is null").IgnoreCase, BothDifferent, InputSet, BothNull));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableAnotherEntityRequired.Output != o.Input);
			await (ExpectAsync(q, Does.Not.Contain("Input is null").IgnoreCase, BothDifferent, InputSet, BothNull));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Input != o.NullableAnotherEntityRequired.Output);
			await (ExpectAsync(q, Does.Not.Contain("Input is null").IgnoreCase, BothDifferent, InputSet, BothNull));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableAnotherEntityRequired.Input != o.Output);
			await (ExpectAsync(q, Does.Contain("Input is null").IgnoreCase, BothDifferent, OutputSet, BothNull));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Output != o.NullableAnotherEntityRequired.Input);
			await (ExpectAsync(q, Does.Contain("Input is null").IgnoreCase, BothDifferent, OutputSet, BothNull));

			q = session.Query<AnotherEntityRequired>().Where(o => 3 != o.NullableOutput.Length);
			await (ExpectAsync(q, Does.Contain("is null").IgnoreCase, InputSet, BothDifferent, BothNull, OutputSet));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableOutput.Length != 3);
			await (ExpectAsync(q, Does.Contain("is null").IgnoreCase, InputSet, BothDifferent, BothNull, OutputSet));

			q = session.Query<AnotherEntityRequired>().Where(o => 3 != o.Input.Length);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, InputSet, BothDifferent));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Input.Length != 3);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, InputSet, BothDifferent));

			q = session.Query<AnotherEntityRequired>().Where(o => (o.NullableAnotherEntityRequiredId ?? 0) != (o.NullableAnotherEntityRequired.NullableAnotherEntityRequiredId ?? 0));
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => (o.NullableAnotherEntityRequired.NullableAnotherEntityRequiredId ?? 0) != (o.NullableAnotherEntityRequiredId ?? 0));
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableAnotherEntityRequiredId.GetValueOrDefault() != o.NullableAnotherEntityRequired.NullableAnotherEntityRequiredId.GetValueOrDefault());
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableAnotherEntityRequired.NullableAnotherEntityRequiredId.GetValueOrDefault() != o.NullableAnotherEntityRequiredId.GetValueOrDefault());
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableAnotherEntityRequiredId.HasValue && o.NullableAnotherEntityRequired.NullableAnotherEntityRequiredId.HasValue && o.NullableAnotherEntityRequiredId.Value != o.NullableAnotherEntityRequired.NullableAnotherEntityRequiredId.Value);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableAnotherEntityRequiredId.HasValue && o.NullableAnotherEntityRequiredId.Value != 0);
			await (ExpectAllAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableAnotherEntityRequiredId.HasValue || o.NullableAnotherEntityRequiredId.Value != 0);
			await (ExpectAllAsync(q, Does.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableOutput != null && o.NullableOutput != "test");
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, BothDifferent, BothSame, OutputSet));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableOutput != null || o.NullableOutput != "test");
			await (ExpectAllAsync(q, Does.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableAnotherEntityRequired.NullableAnotherEntityRequiredId.Value != o.NullableAnotherEntityRequiredId.Value);
			await (ExpectAsync(q, Does.Contain("or case").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.RelatedItems.Any(r => r.Output != o.Input));
			await (ExpectAsync(q, Does.Not.Contain("Input is null").IgnoreCase.And.Contain("Output is null").IgnoreCase, BothDifferent, InputSet, BothNull));

			q = session.Query<AnotherEntityRequired>().Where(o => o.RelatedItems.All(r => r.Output != o.Input));
			await (ExpectAsync(q, Does.Not.Contain("Input is null").IgnoreCase.And.Contain("Output is null").IgnoreCase, InputSet, OutputSet, BothDifferent, BothNull));

			q = session.Query<AnotherEntityRequired>().Where(o => o.RelatedItems.All(r => r.Output != null && r.Output != o.Input));
			await (ExpectAsync(q, Does.Not.Contain("Input is null").IgnoreCase.And.Not.Contain("Output is null").IgnoreCase, BothDifferent, OutputSet));

			q = session.Query<AnotherEntityRequired>().Where(o => (o.NullableOutput + o.Output) != o.Output);
			await (ExpectAllAsync(q, Does.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => (o.Input + o.Output) != o.Output);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, BothSame, BothDifferent));

			q = session.Query<AnotherEntityRequired>().Where(o => o.RelatedItems.Count != 1);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.RelatedItems.Max(r => r.Id) != 0);
			await (ExpectAllAsync(q, Does.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.RelatedItems.Take(10).All(r => r.Output != null) != o.NullableBool);
			await (ExpectAllAsync(q, Does.Not.Contain("or case").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.RelatedItems.Where(r => r.Id == 0).Sum(r => r.Input.Length) != 5);
			await (ExpectAllAsync(q, Does.Contain("or (").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Address.Street != o.Output);
			await (ExpectAsync(q, Does.Contain("Input is null").IgnoreCase, BothDifferent, OutputSet, BothNull));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Address.City != o.Output);
			await (ExpectAsync(q, Does.Contain("Output is null").IgnoreCase, InputSet, BothNull));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Address.City != null && o.Address.City != o.Output);
			await (ExpectAsync(q, Does.Not.Contain("Output is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Address.Street != null && o.Address.Street != o.NullableOutput);
			await (ExpectAsync(q, Does.Contain("Output is null").IgnoreCase, InputSet, BothDifferent));

			q = session.Query<AnotherEntityRequired>().Where(o => o.RelatedItems.All(r => r.Output != null) != (o.NullableOutput.Length > 0));
			await (ExpectAsync(q, Does.Not.Contain("or case").IgnoreCase));
		}

		[Test]
		public async Task NullEqualityWithNotNullAsync()
		{
			IQueryable<AnotherEntityRequired> q;

			q = session.Query<AnotherEntityRequired>().Where(o => o.Input == null);
			await (ExpectAsync(q, Does.Not.Contain("or is null").IgnoreCase, OutputSet, BothNull));

			q = session.Query<AnotherEntityRequired>().Where(o => null == o.Input);
			await (ExpectAsync(q, Does.Not.Contain("or is null").IgnoreCase, OutputSet, BothNull));

			q = session.Query<AnotherEntityRequired>().Where(o => o.InputNullability == AnotherEntityNullability.True);
			await (ExpectAsync(q, Does.Not.Contain("end is null").IgnoreCase, BothNull, OutputSet));

			q = session.Query<AnotherEntityRequired>().Where(o => AnotherEntityNullability.True == o.InputNullability);
			await (ExpectAsync(q, Does.Not.Contain("end is null").IgnoreCase, BothNull, OutputSet));

			q = session.Query<AnotherEntityRequired>().Where(o => "input" == o.Input);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, InputSet, BothDifferent));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Input == "input");
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, InputSet, BothDifferent));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Input == o.Output);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, BothSame));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Output == o.Input);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, BothSame));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Input == o.NullableOutput);
			await (ExpectAsync(q, Does.Not.Contain("Input is null").IgnoreCase, BothSame));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableOutput == o.Input);
			await (ExpectAsync(q, Does.Not.Contain("Input is null").IgnoreCase, BothSame));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableAnotherEntityRequired.Output == o.Input);
			await (ExpectAsync(q, Does.Not.Contain("Input is null").IgnoreCase, BothSame));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Input == o.NullableAnotherEntityRequired.Output);
			await (ExpectAsync(q, Does.Not.Contain("Input is null").IgnoreCase, BothSame));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableAnotherEntityRequired.Input == o.Output);
			await (ExpectAsync(q, Does.Not.Contain("Input is null").IgnoreCase, BothSame));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Output == o.NullableAnotherEntityRequired.Input);
			await (ExpectAsync(q, Does.Not.Contain("Input is null").IgnoreCase, BothSame));

			q = session.Query<AnotherEntityRequired>().Where(o => 3 == o.Input.Length);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, BothSame));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Input.Length == 3);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, BothSame));

			q = session.Query<AnotherEntityRequired>().Where(o => (o.NullableAnotherEntityRequiredId ?? 0) == (o.NullableAnotherEntityRequired.NullableAnotherEntityRequiredId ?? 0));
			await (ExpectAllAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => (o.NullableAnotherEntityRequired.NullableAnotherEntityRequiredId ?? 0) == (o.NullableAnotherEntityRequiredId ?? 0));
			await (ExpectAllAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableAnotherEntityRequiredId.GetValueOrDefault() == o.NullableAnotherEntityRequired.NullableAnotherEntityRequiredId.GetValueOrDefault());
			await (ExpectAllAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableAnotherEntityRequired.NullableAnotherEntityRequiredId.GetValueOrDefault() == o.NullableAnotherEntityRequiredId.GetValueOrDefault());
			await (ExpectAllAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableAnotherEntityRequiredId.HasValue && o.NullableAnotherEntityRequired.NullableAnotherEntityRequiredId.HasValue && o.NullableAnotherEntityRequiredId.Value == o.NullableAnotherEntityRequired.NullableAnotherEntityRequiredId.Value);
			await (ExpectAllAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableAnotherEntityRequiredId.HasValue && o.NullableAnotherEntityRequiredId.Value == 0);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableAnotherEntityRequiredId.HasValue || o.NullableAnotherEntityRequiredId.Value == 0);
			await (ExpectAllAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableOutput == "test");
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableOutput != null || o.NullableOutput == "test");
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, OutputSet, BothDifferent, BothSame));

			q = session.Query<AnotherEntityRequired>().Where(o => o.NullableAnotherEntityRequired.NullableAnotherEntityRequiredId.Value == o.NullableAnotherEntityRequiredId.Value);
			await (ExpectAllAsync(q, Does.Contain("Id is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.RelatedItems.Any(r => r.Output == o.Input));
			await (ExpectAsync(q, Does.Not.Contain("Input is null").IgnoreCase.And.Not.Contain("Output is null").IgnoreCase, BothSame));

			q = session.Query<AnotherEntityRequired>().Where(o => o.RelatedItems.All(r => r.Output == o.Input));
			await (ExpectAsync(q, Does.Not.Contain("Input is null").IgnoreCase.And.Not.Contain("Output is null").IgnoreCase, BothSame, BothNull, InputSet, OutputSet));

			q = session.Query<AnotherEntityRequired>().Where(o => o.RelatedItems.All(r => r.Output == o.NullableOutput));
			await (ExpectAllAsync(q, Does.Contain("Output is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.RelatedItems.All(r => r.Output != null && o.NullableOutput != null && r.Output == o.NullableOutput));
			await (ExpectAsync(q, Does.Not.Contain("Output is null").IgnoreCase, BothSame, BothDifferent, OutputSet));

			q = session.Query<AnotherEntityRequired>().Where(o => (o.NullableOutput + o.Output) == o.Output);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => (o.Input + o.Output) == o.Output);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.RelatedItems.Count == 1);
			await (ExpectAllAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.RelatedItems.Max(r => r.Id) == 0);
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => !o.Input.Equals(o.Output));
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, BothDifferent));

			q = session.Query<AnotherEntityRequired>().Where(o => !o.Output.Equals(o.Input));
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, BothDifferent));

			q = session.Query<AnotherEntityRequired>().Where(o => !o.Input.Equals(o.NullableOutput));
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, BothDifferent));

			q = session.Query<AnotherEntityRequired>().Where(o => !o.NullableOutput.Equals(o.Input));
			await (ExpectAsync(q, Does.Not.Contain("is null").IgnoreCase, BothDifferent));

			q = session.Query<AnotherEntityRequired>().Where(o => !o.NullableOutput.Equals(o.NullableOutput));
			await (ExpectAsync(q, Does.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => !o.NullableOutput.Equals(o.NullableOutput));
			await (ExpectAsync(q, Does.Contain("is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Address.City == o.NullableOutput);
			await (ExpectAllAsync(q, Does.Contain("Output is null").IgnoreCase));

			q = session.Query<AnotherEntityRequired>().Where(o => o.Address.Street != null && o.Address.Street == o.NullableOutput);
			await (ExpectAsync(q, Does.Not.Contain("Output is null").IgnoreCase, BothSame));
		}


		[Test]
		public async Task NullEqualityAsync()
		{
			string nullVariable = null;
			string nullVariable2 = null;
			string notNullVariable = "input";

			Assert.AreEqual(5, (await (session.CreateCriteria<AnotherEntity>().ListAsync<AnotherEntity>())).Count);

			IQueryable<AnotherEntity> q;

			// Null literal against itself
			q = from x in session.Query<AnotherEntity>() where null == null select x;
			await (ExpectAllAsync(q));

			// Null against constants
			q = from x in session.Query<AnotherEntity>() where null == "value" select x;
			await (ExpectNoneAsync(q));
			q = from x in session.Query<AnotherEntity>() where "value" == null select x;
			await (ExpectNoneAsync(q));

			// Null against variables
			q = from x in session.Query<AnotherEntity>() where null == nullVariable select x;
			await (ExpectAllAsync(q));
			q = from x in session.Query<AnotherEntity>() where null == notNullVariable select x;
			await (ExpectNoneAsync(q));
			q = from x in session.Query<AnotherEntity>() where nullVariable == null select x;
			await (ExpectAllAsync(q));
			q = from x in session.Query<AnotherEntity>() where notNullVariable == null select x;
			await (ExpectNoneAsync(q));

			// Null against columns
			q = from x in session.Query<AnotherEntity>() where x.Input == null select x;
			await (ExpectInputIsNullAsync(q));
			q = from x in session.Query<AnotherEntity>() where null == x.Input select x;
			await (ExpectInputIsNullAsync(q));

			// All null pairings with two columns.
			q = from x in session.Query<AnotherEntity>() where x.Input == null && x.Output == null select x;
			await (ExpectAsync(q, BothNull));
			q = from x in session.Query<AnotherEntity>() where x.Input != null && x.Output == null select x;
			await (ExpectAsync(q, InputSet));
			q = from x in session.Query<AnotherEntity>() where x.Input == null && x.Output != null select x;
			await (ExpectAsync(q, OutputSet));
			q = from x in session.Query<AnotherEntity>() where x.Input != null && x.Output != null select x;
			await (ExpectAsync(q, BothSame, BothDifferent));

			// Variables against variables
			q = from x in session.Query<AnotherEntity>() where nullVariable == nullVariable2 select x;
			await (ExpectAllAsync(q));
			q = from x in session.Query<AnotherEntity>() where nullVariable == notNullVariable select x;
			await (ExpectNoneAsync(q));
			q = from x in session.Query<AnotherEntity>() where notNullVariable == nullVariable select x;
			await (ExpectNoneAsync(q));

			//// Variables against columns
			q = from x in session.Query<AnotherEntity>() where nullVariable == x.Input select x;
			await (ExpectInputIsNullAsync(q));
			q = from x in session.Query<AnotherEntity>() where notNullVariable == x.Input select x;
			await (ExpectAsync(q, InputSet, BothDifferent));
			q = from x in session.Query<AnotherEntity>() where x.Input == nullVariable select x;
			await (ExpectInputIsNullAsync(q));
			q = from x in session.Query<AnotherEntity>() where x.Input == notNullVariable select x;
			await (ExpectAsync(q, InputSet, BothDifferent));

			// Columns against columns
			q = from x in session.Query<AnotherEntity>() where x.Input == x.Output select x;
			await (ExpectAsync(q, BothSame, BothNull));
		}

		[Test]
		public async Task NullInequalityAsync()
		{
			string nullVariable = null;
			string nullVariable2 = null;
			string notNullVariable = "input";

			IQueryable<AnotherEntity> q;

			// Null literal against itself
			q = from x in session.Query<AnotherEntity>() where null != null select x;
			await (ExpectNoneAsync(q));

			// Null against constants
			q = from x in session.Query<AnotherEntity>() where null != "value" select x;
			await (ExpectAllAsync(q));
			q = from x in session.Query<AnotherEntity>() where "value" != null select x;
			await (ExpectAllAsync(q));

			// Null against variables
			q = from x in session.Query<AnotherEntity>() where null != nullVariable select x;
			await (ExpectNoneAsync(q));
			q = from x in session.Query<AnotherEntity>() where null != notNullVariable select x;
			await (ExpectAllAsync(q));
			q = from x in session.Query<AnotherEntity>() where nullVariable != null select x;
			await (ExpectNoneAsync(q));
			q = from x in session.Query<AnotherEntity>() where notNullVariable != null select x;
			await (ExpectAllAsync(q));

			// Null against columns.
			q = from x in session.Query<AnotherEntity>() where x.Input != null select x;
			await (ExpectInputIsNotNullAsync(q));
			q = from x in session.Query<AnotherEntity>() where null != x.Input select x;
			await (ExpectInputIsNotNullAsync(q));

			// Variables against variables.
			q = from x in session.Query<AnotherEntity>() where nullVariable != nullVariable2 select x;
			await (ExpectNoneAsync(q));
			q = from x in session.Query<AnotherEntity>() where nullVariable != notNullVariable select x;
			await (ExpectAllAsync(q));
			q = from x in session.Query<AnotherEntity>() where notNullVariable != nullVariable select x;
			await (ExpectAllAsync(q));

			// Variables against columns.
			q = from x in session.Query<AnotherEntity>() where nullVariable != x.Input select x;
			await (ExpectInputIsNotNullAsync(q));
			q = from x in session.Query<AnotherEntity>() where notNullVariable != x.Input select x;
			await (ExpectAsync(q, BothSame, BothNull, OutputSet));
			q = from x in session.Query<AnotherEntity>() where x.Input != nullVariable select x;
			await (ExpectInputIsNotNullAsync(q));
			q = from x in session.Query<AnotherEntity>() where x.Input != notNullVariable select x;
			await (ExpectAsync(q, BothSame, OutputSet, BothNull));

			// Columns against columns
			q = from x in session.Query<AnotherEntity>() where x.Input != x.Output select x;
			await (ExpectAsync(q, BothDifferent, InputSet, OutputSet));
		}

		[Test]
		public async Task NullEqualityInvertedAsync()
		{
			string nullVariable = null;
			string nullVariable2 = null;
			string notNullVariable = "input";

			IQueryable<AnotherEntity> q;

			// Null literal against itself
			q = from x in session.Query<AnotherEntity>() where !(null == null) select x;
			await (ExpectNoneAsync(q));

			// Null against constants
			q = from x in session.Query<AnotherEntity>() where !(null == "value") select x;
			await (ExpectAllAsync(q));
			q = from x in session.Query<AnotherEntity>() where !("value" == null) select x;
			await (ExpectAllAsync(q));

			// Null against variables
			q = from x in session.Query<AnotherEntity>() where !(null == nullVariable) select x;
			await (ExpectNoneAsync(q));
			q = from x in session.Query<AnotherEntity>() where !(null == notNullVariable) select x;
			await (ExpectAllAsync(q));
			q = from x in session.Query<AnotherEntity>() where !(nullVariable == null) select x;
			await (ExpectNoneAsync(q));
			q = from x in session.Query<AnotherEntity>() where !(notNullVariable == null) select x;
			await (ExpectAllAsync(q));

			// Null against columns
			q = from x in session.Query<AnotherEntity>() where !(x.Input == null) select x;
			await (ExpectInputIsNotNullAsync(q));
			q = from x in session.Query<AnotherEntity>() where !(null == x.Input) select x;
			await (ExpectInputIsNotNullAsync(q));

			// All null pairings with two columns.
			q = from x in session.Query<AnotherEntity>() where !(x.Input == null && x.Output == null) select x;
			await (ExpectAsync(q, InputSet, OutputSet, BothSame, BothDifferent));
			q = from x in session.Query<AnotherEntity>() where !(x.Input != null && x.Output == null) select x;
			await (ExpectAsync(q, OutputSet, BothNull, BothSame, BothDifferent));
			q = from x in session.Query<AnotherEntity>() where !(x.Input == null && x.Output != null) select x;
			await (ExpectAsync(q, InputSet, BothSame, BothDifferent, BothNull));
			q = from x in session.Query<AnotherEntity>() where !(x.Input != null && x.Output != null) select x;
			await (ExpectAsync(q, InputSet, OutputSet, BothNull));

			// Variables against variables
			q = from x in session.Query<AnotherEntity>() where !(nullVariable == nullVariable2) select x;
			await (ExpectNoneAsync(q));
			q = from x in session.Query<AnotherEntity>() where !(nullVariable == notNullVariable) select x;
			await (ExpectAllAsync(q));
			q = from x in session.Query<AnotherEntity>() where !(notNullVariable == nullVariable) select x;
			await (ExpectAllAsync(q));

			// Variables against columns
			q = from x in session.Query<AnotherEntity>() where !(nullVariable == x.Input) select x;
			await (ExpectInputIsNotNullAsync(q));
			q = from x in session.Query<AnotherEntity>() where !(notNullVariable == x.Input) select x;
			await (ExpectAsync(q, BothSame));
			q = from x in session.Query<AnotherEntity>() where !(x.Input == nullVariable) select x;
			await (ExpectInputIsNotNullAsync(q));
			q = from x in session.Query<AnotherEntity>() where !(x.Input == notNullVariable) select x;
			await (ExpectAsync(q, BothSame));

			// Columns against columns
			q = from x in session.Query<AnotherEntity>() where !(x.Input == x.Output) select x;
			await (ExpectAsync(q, BothDifferent));
		}

		[Test]
		public async Task NullInequalityInvertedAsync()
		{
			string nullVariable = null;
			string nullVariable2 = null;
			string notNullVariable = "input";

			IQueryable<AnotherEntity> q;

			// Null literal against itself
			q = from x in session.Query<AnotherEntity>() where !(null != null) select x;
			await (ExpectAllAsync(q));

			// Null against constants
			q = from x in session.Query<AnotherEntity>() where !(null != "value") select x;
			await (ExpectNoneAsync(q));
			q = from x in session.Query<AnotherEntity>() where !("value" != null) select x;
			await (ExpectNoneAsync(q));

			// Null against variables
			q = from x in session.Query<AnotherEntity>() where !(null != nullVariable) select x;
			await (ExpectAllAsync(q));
			q = from x in session.Query<AnotherEntity>() where !(null != notNullVariable) select x;
			await (ExpectNoneAsync(q));
			q = from x in session.Query<AnotherEntity>() where !(nullVariable != null) select x;
			await (ExpectAllAsync(q));
			q = from x in session.Query<AnotherEntity>() where !(notNullVariable != null) select x;
			await (ExpectNoneAsync(q));

			// Null against columns.
			q = from x in session.Query<AnotherEntity>() where !(x.Input != null) select x;
			await (ExpectInputIsNullAsync(q));
			q = from x in session.Query<AnotherEntity>() where !(null != x.Input) select x;
			await (ExpectInputIsNullAsync(q));

			// Variables against variables.
			q = from x in session.Query<AnotherEntity>() where !(nullVariable != nullVariable2) select x;
			await (ExpectAllAsync(q));
			q = from x in session.Query<AnotherEntity>() where !(nullVariable != notNullVariable) select x;
			await (ExpectNoneAsync(q));
			q = from x in session.Query<AnotherEntity>() where !(notNullVariable != nullVariable) select x;
			await (ExpectNoneAsync(q));

			// Variables against columns.
			q = from x in session.Query<AnotherEntity>() where !(nullVariable != x.Input) select x;
			await (ExpectInputIsNullAsync(q));
			q = from x in session.Query<AnotherEntity>() where !(notNullVariable != x.Input) select x;
			await (ExpectAsync(q, InputSet, BothDifferent));
			q = from x in session.Query<AnotherEntity>() where !(x.Input != nullVariable) select x;
			await (ExpectInputIsNullAsync(q));
			q = from x in session.Query<AnotherEntity>() where !(x.Input != notNullVariable) select x;
			await (ExpectAsync(q, InputSet, BothDifferent));

			// Columns against columns
			q = from x in session.Query<AnotherEntity>() where !(x.Input != x.Output) select x;
			await (ExpectAsync(q, BothSame));
		}

		private Task ExpectAllAsync(IQueryable<AnotherEntity> q)
		{
			return ExpectAsync(q, BothNull, BothSame, BothDifferent, InputSet, OutputSet);
		}

		private Task ExpectNoneAsync(IQueryable<AnotherEntity> q)
		{
			return ExpectAsync(q);
		}

		private Task ExpectInputIsNullAsync(IQueryable<AnotherEntity> q)
		{
			return ExpectAsync(q, BothNull, OutputSet);
		}

		private Task ExpectInputIsNotNullAsync(IQueryable<AnotherEntity> q)
		{
			return ExpectAsync(q, InputSet, BothSame, BothDifferent);
		}

		private async Task ExpectAsync(IQueryable<AnotherEntity> q, params AnotherEntity[] entities)
		{
			IList<AnotherEntity> results = (await (q.ToListAsync())).OrderBy(l=> Key(l)).ToList();
			IList<AnotherEntity> check = entities.OrderBy(l => Key(l)).ToList();

			Assert.AreEqual(check.Count, results.Count);
			for(int i=0; i<check.Count; i++)
				Assert.AreEqual(Key(check[i]), Key(results[i]));
		}

		private string Key(AnotherEntity e)
		{
			return "Input=" + (e.Input ?? "NULL") + ", Output=" + (e.Output ?? "NULL");
		}

		private Task ExpectAllAsync(IQueryable<AnotherEntityRequired> q, IResolveConstraint sqlConstraint)
		{
			return ExpectAsync(q, sqlConstraint, BothNull, BothSame, BothDifferent, InputSet, OutputSet);
		}

		private async Task ExpectAsync(IQueryable<AnotherEntityRequired> q, IResolveConstraint sqlConstraint, params AnotherEntity[] entities)
		{
			IList<AnotherEntityRequired> results;
			if (sqlConstraint == null)
			{
				results = await (GetResultsAsync(q));
			}
			else
			{
				using (var sqlLog = new SqlLogSpy())
				{
					results = await (GetResultsAsync(q));
					Assert.That(sqlLog.GetWholeLog(), sqlConstraint);
				}
			}

			IList<AnotherEntity> check = entities.OrderBy(Key).ToList();

			Assert.That(results.Count, Is.EqualTo(check.Count));
			for (var i = 0; i < check.Count; i++)
			{
				Assert.That(Key(results[i]), Is.EqualTo(Key(check[i])));
			}
		}

		private async Task<IList<AnotherEntityRequired>> GetResultsAsync(IQueryable<AnotherEntityRequired> q, CancellationToken cancellationToken = default(CancellationToken))
		{
			return (await (q.ToListAsync(cancellationToken))).OrderBy(Key).ToList();
		}

		private static string Key(AnotherEntityRequired e)
		{
			return "Input=" + (e.Input ?? "NULL") + ", Output=" + (e.Output ?? "NULL");
		}
	}
}
