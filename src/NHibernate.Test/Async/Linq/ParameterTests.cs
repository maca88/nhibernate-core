//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using NUnit.Framework;
using NHibernate.Linq;

namespace NHibernate.Test.Linq
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class ParameterTestsAsync : LinqTestCase
	{
		[Test]
		public async Task UsingSameArrayParameterTwiceAsync()
		{
			var ids = new[] {11008, 11019, 11039};
			await (AssertTotalParametersAsync(
				db.Orders.Where(o => ids.Contains(o.OrderId) && ids.Contains(o.OrderId)),
				ids.Length));
		}

		[Test]
		public async Task UsingDifferentArrayParametersAsync()
		{
			var ids = new[] { 11008, 11019, 11039 };
			var ids2 = new[] { 11008, 11019, 11039 };
			await (AssertTotalParametersAsync(
				db.Orders.Where(o => ids.Contains(o.OrderId) && ids2.Contains(o.OrderId)),
				ids.Length + ids2.Length));
		}

		[Test]
		public async Task UsingSameListParameterTwiceAsync()
		{
			var ids = new List<int> { 11008, 11019, 11039 };
			await (AssertTotalParametersAsync(
				db.Orders.Where(o => ids.Contains(o.OrderId) && ids.Contains(o.OrderId)),
				ids.Count));
		}

		[Test]
		public async Task UsingDifferentListParametersAsync()
		{
			var ids = new List<int> { 11008, 11019, 11039 };
			var ids2 = new List<int> { 11008, 11019, 11039 };
			await (AssertTotalParametersAsync(
				db.Orders.Where(o => ids.Contains(o.OrderId) && ids2.Contains(o.OrderId)),
				ids.Count + ids2.Count));
		}

		[Test]
		public async Task UsingSameEntityParameterTwiceAsync()
		{
			var order = await (db.Orders.FirstAsync());
			await (AssertTotalParametersAsync(
				db.Orders.Where(o => o == order && o != order),
				1));
		}

		[Test]
		public async Task UsingDifferentEntityParametersAsync()
		{
			var order = await (db.Orders.FirstAsync());
			var order2 = await (db.Orders.Skip(1).FirstAsync());
			await (AssertTotalParametersAsync(
				db.Orders.Where(o => o == order && o != order2),
				2));
		}

		[Test]
		public async Task UsingSameValueTypeParameterTwiceAsync()
		{
			var value = 1;
			await (AssertTotalParametersAsync(
				db.Orders.Where(o => o.OrderId == value && o.OrderId != value),
				1));
		}

		[Test]
		public async Task UsingDifferentValueTypeParametersAsync()
		{
			var value = 1;
			var value2 = 2;
			await (AssertTotalParametersAsync(
				db.Orders.Where(o => o.OrderId == value && o.OrderId != value2),
				2));
		}

		[Test]
		public async Task UsingSameStringParameterTwiceAsync()
		{
			var value = "test";
			await (AssertTotalParametersAsync(
				db.Products.Where(o => o.Name == value && o.Name != value),
				1));
		}

		[Test]
		public async Task UsingDifferentStringParametersAsync()
		{
			var value = "test";
			var value2 = "test2";
			await (AssertTotalParametersAsync(
				db.Products.Where(o => o.Name == value && o.Name != value2),
				2));
		}

		private static async Task AssertTotalParametersAsync<T>(IQueryable<T> query, int parameterNumber, CancellationToken cancellationToken = default(CancellationToken))
		{
			using (var sqlSpy = new SqlLogSpy())
			{
				await (query.ToListAsync(cancellationToken));
				var sqlParameters = sqlSpy.GetWholeLog().Split(';')[1];
				var matches = Regex.Matches(sqlParameters, @"([\d\w]+)[\s]+\=", RegexOptions.IgnoreCase);

				// Due to ODBC drivers not supporting parameter names, we have to do a distinct of parameter names.
				var distinctParameters = matches.OfType<Match>().Select(m => m.Groups[1].Value.Trim()).Distinct().ToList();
				Assert.That(distinctParameters, Has.Count.EqualTo(parameterNumber));
			}
		}
	}
}
