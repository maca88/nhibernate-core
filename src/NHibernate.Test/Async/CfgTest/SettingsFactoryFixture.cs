//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using NHibernate.AdoNet;
using NHibernate.Bytecode;
using NHibernate.Cache;
using NHibernate.Cfg;
using NHibernate.Connection;
using NHibernate.Exceptions;
using NHibernate.Hql;
using NHibernate.Hql.Ast.ANTLR;
using NHibernate.Linq.Functions;
using NHibernate.Linq.Visitors;
using NHibernate.Transaction;
using NSubstitute;
using NUnit.Framework;
using Environment = NHibernate.Cfg.Environment;

namespace NHibernate.Test.CfgTest
{
	using System.Threading.Tasks;
	[TestFixture]
	public class SettingsFactoryFixtureAsync
	{

		[Test]
		public async Task InvalidRegisteredServicesAsync()
		{
			await (InvalidRegisteredServiceAsync<IBatcherFactory>());
			await (InvalidRegisteredServiceAsync<ICacheProvider>());
			await (InvalidRegisteredServiceAsync<IConnectionProvider>());
			await (InvalidRegisteredServiceAsync<Dialect.Dialect>());
			await (InvalidRegisteredServiceAsync<ILinqToHqlGeneratorsRegistry>());
			await (InvalidRegisteredServiceAsync<IQueryCacheFactory>());
			await (InvalidRegisteredServiceAsync<IQueryModelRewriterFactory>());
			await (InvalidRegisteredServiceAsync<IQueryTranslatorFactory>());
			await (InvalidRegisteredServiceAsync<ITransactionFactory>());
		}

		private Task InvalidRegisteredServiceAsync<TService>()
		{
			try
			{
				var sp = new SimpleServiceProvider();
				sp.Register<TService>(() => throw new InvalidOperationException());

				Environment.ServiceProvider = sp;

				var properties = new Dictionary<string, string>
			{
				{Environment.UseQueryCache, "true"}
			};
				if (typeof(TService) != typeof(Dialect.Dialect))
				{
					properties.Add(Environment.Dialect, typeof(Dialect.PostgreSQL83Dialect).FullName);
				}

				Assert.Throws<HibernateException>(
				() => new SettingsFactory().BuildSettings(properties),
				$"HibernateException should be thrown for service {typeof(TService)}");
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		private IServiceProvider _originalSp;

		[SetUp]
		public void Setup()
		{
			_originalSp = Environment.ServiceProvider;
		}

		[TearDown]
		public void TearDown()
		{
			Environment.ServiceProvider = _originalSp;
		}
	}
}
